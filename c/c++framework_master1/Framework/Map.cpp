#include "Map.h"
#include "Bullet.h"
#include "InputManager.h"
#include "CursorManager.h"

Map::Map()
{
}

Map::~Map()
{
}

void Map::Start()
{
	SetMaze(StrMaze);

	Info.Position = Vector3(6.0f, 4.0f);
	Info.Rotation = Vector3(0.0f, 0.0f);
	Info.Scale = Vector3(2.0f, 1.0f);

	Target = nullptr;
}

int Map::Update()
{
	
	return 0;
}

void Map::Render()
{
	//  for(int i = 0; i < 110; ++i)
	//  	CursorManager::GetInstance()->WriteBuffer(6.0f + i, 2.0f, (char*)"#", 7);
	//  for (int i = 0; i < 34; ++i)
	//  	CursorManager::GetInstance()->WriteBuffer(6.0f, 3.0f + i, (char*)"#", 7);
	//  for (int i = 0; i < 34; ++i)
	//  	CursorManager::GetInstance()->WriteBuffer(115.0f, 3.0f + i, (char*)"#", 7);
	//  for (int i = 0; i < 110; ++i)
	//  	CursorManager::GetInstance()->WriteBuffer(6.0f + i, 37.0f, (char*)"#", 7);
	for (int i = 0; i < 101; ++i)
	{
		for (int j = 0; j < 31; ++j)
		{
			if (StrMaze[i][j] == '0')
				CursorManager::GetInstance()->WriteBuffer(Info.Position, (char*)"¡á");
			if (StrMaze[i][j] == '1')
				CursorManager::GetInstance()->WriteBuffer(Info.Position, (char*)" ");
			if (StrMaze[i][j] == '2')
				CursorManager::GetInstance()->WriteBuffer(Info.Position, (char*)"¡Ú");
			if (StrMaze[i][j] == '3')
				CursorManager::GetInstance()->WriteBuffer(Info.Position, (char*)"¡Ù");
		}
	}
}

void Map::Release()
{

}

void Map::SetMaze(char _Maze[31][101])
{
	strcpy_s(_Maze[0],  "2111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000");
	strcpy_s(_Maze[1],  "0011100000000000000000000000000000000000000000000000000000001000000000000000000000000000000000010000");
	strcpy_s(_Maze[2],  "0001111111111111111111111111111111111111111100000000000001111111111111111111111111111111110000010000");
	strcpy_s(_Maze[3],  "0000100000000010000000000000000111111111111111111111111110000000000000000000000111000000000000010000");
	strcpy_s(_Maze[4],  "0000100000000010000000000000000000000000000001000000000000000000000000000000000011100000000000010000");
	strcpy_s(_Maze[5],  "0000111000001111100000000011111111111110000001000000000000000000111111111111111111111111111100010000");
	strcpy_s(_Maze[6],  "0000000000100000000000000000000000000000000001000000011111111111111100000000000110000000000000010000");
	strcpy_s(_Maze[7],  "0000000001000000000000000000000000000000000001000000000000000110000000000000000011000000000000010000");
	strcpy_s(_Maze[8],  "0000000010000000000111111111111111111111111111111111111111111111110000000000000001100000000000100000");
	strcpy_s(_Maze[9],  "0000000111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111113");
	strcpy_s(_Maze[10], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[11], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[12], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[13], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[14], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[15], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[16], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[17], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[18], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[19], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[20], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[21], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[22], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[23], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[24], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[25], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[26], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[27], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[28], "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	strcpy_s(_Maze[29], "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
}
